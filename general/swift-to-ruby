#!/usr/bin/env ruby

class SwiftToRuby
  attr_reader :text

  def initialize(path)
    @path = path
  end

  def translate
    read

    text.gsub!(/^ *import \w+\n/,  '')
    text.gsub!(/^ *struct (\w+) {/, 'class \1')

    text.gsub!(/^( *)if (.*) {$/, '\1if \2')
    text.gsub!(/^( *)} else {/, '\1else')
    text.gsub!(/^( *)} else if(.*){/, '\1elsif\2')
    text.gsub!(/^( *)}/, '\1end')

    text.sub!(/^( *)private /, '\1private' + "\n\n" + '\1')
    text.gsub!(/^( *)private (\w+) func/, '\1\2 func')
    text.gsub!(/^( *)static func (\w+\(.*\))( -> \w+|) {/, '\1def self.\2')
    text.gsub!(/\s([A-Z]\w+)\(/, ' \1.new(')

    text.gsub!(/^( *)init(\(.*\)) {/, '\1def initialize\2')
    text.gsub!(/^( *)func (\w+\(.*\))( -> (\[|)\w+(\?|)(\]|)|) {/, '\1def \2')

    text.gsub!(/(\[\w+\])\(\)/, '[] # \1')
    text.gsub!(/\\\(([\w\.]+)\)/, '#{\1}')
    text.gsub!(/^( *)_ = /, '\1')

    text.gsub!(/\(_ (\w+): ([A-Z]\w+)/, '(\1')
    text.gsub!(/\(\w (\w+): ([A-Z]\w+)/, '(\1:')

    # text.gsub!(/(\w+): \w+/, '\1')

    text.gsub!(/\?\?/, '||')
    text.gsub!(/\/\/ /, '# ')
    text.gsub!(/\(\)/, '')

    text.gsub!(/^( *)for (\w+) in (\w+) {/, '\1\3.each do |\2|')

    text.gsub!(/ { ([\w, ]+) in/, ' do |\1|')

    write
  end

  private

  def read
    @text = File.read(@path)
  end

  def write
    File.open(@path, 'w') { |file| file.puts text }
  end
end

Dir.glob('**/*').select { |path| File.file?(path) && (path.end_with?('.swift') || path.end_with?('.rb')) }
                .each { |path| SwiftToRuby.new(path).translate }
