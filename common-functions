#!/usr/bin/env bash

current_dir=$( pwd )
home_dir=$( cd ~ && pwd )
script_dir=$( cd "$( dirname "$0" )" && pwd )
log=""

# usage: `if was_successful; then`
was_successful() {
  [[ $? == 0 ]]
}

# usage: `if was_not_successful; then`
was_not_successful() {
  [[ $? != 0 ]]
}

source_relative() {
  source $script_dir/$*
}

execute() {
  retry 1 $*
}

dont_care_if_executes() {
  retry 1 pretend-fail-never-happened $*
}

execute_verbose() {
  local cmd="$*"
  $cmd
  status_code="$?"
  if [[ $status_code != 0 ]]; then
    exit 1
  else
    echo ‚úÖ
  fi
}

retry() {
  local n=0
  local try=$1
  local options=$2

  if [[ $options == "silent" ]]; then
    local cmd="${@: 3}"
  else
    if [[ $options == "pretend-fail-never-happened" ]]; then
      local cmd="${@: 3}"
    else
      local cmd="${@: 2}"
    fi
  fi

  until [[ $n -ge $try ]]
  do
    $cmd > /tmp/common-retry.log 2> /tmp/common-retry.log &
    pid=$!

    spin='üåëüåíüåìüåîüåïüåñüåóüåò'
    spin_count=8
    i=0

    while kill -0 $pid 2>/dev/null
    do
      i=$(( (i+1) %$spin_count ))
      printf "\r${spin:$i:1}  ${cmd:0:$[$(tput cols)-4]} "
      sleep .1
    done
    printf "\r"

    wait $pid

    status_code="$?"
    if [[ $status_code == 0 ]]; then
      if [[ $options =~ "silent" ]]; then
        printf "\r\033[K"
      else
        log_echo "‚úÖ  ${cmd:0:$[$(tput cols)-4]}"
      fi
      break
    else
      printf "\r\033[K"
      ((n++))
      if [[ $n -ge $try ]]; then
        if [[ $options =~ "pretend-fail-never-happened" ]]; then
          printf "\r\033[K"
          return $status_code
        else
          log_echo "üí•Ô∏èÔ∏è  failed with status $status_code: $cmd"
          cat /tmp/common-retry.log
          exit $status_code
        fi
      fi
      echo "retrying... $n"
      sleep 1;
    fi
  done
}

question() {
  echo ""
  echo "‚ö†Ô∏èÔ∏è  $2"
  if [[ $3 == "" ]]; then
    printf "> "
  else
    printf "(leave blank for $3)> "
  fi
  if [[ $4 == "password" ]]; then
    read -s response
  else
    read response
  fi
  if [[ $response == "" ]]; then
    response="$3"
  fi
  echo ""
  eval "$1='$response'"
}

question_if_empty() {
  value=`echo ${!1}`
  if [[ $value == "" ]]; then
    question $1 "$2" "$3" $4
  fi
}

successfully() {
  # log_echo "üêæ  $*"
  # $*
  execute $*
  if [[ $? != 0 ]]; then
    echo ‚õîÔ∏è
    exit 1
  fi
}

check_last() {
  echo "üêæ  $*"
  if [[ $? != 0 ]]; then
    echo ‚õîÔ∏è
    exit 1
  fi
}

warn() {
  echo "‚ö†Ô∏èÔ∏è  $*"
}

heading() {
  real_clear
  log_echo
  log_echo "- $*"
}

log_echo() {
  if [[ $CLEAR_SCREEN_BETWEEN_LOGS == "true" ]]; then
    log="$log
  $*"
    real_clear
  else
    echo "$*"
  fi
}

real_clear() {
  printf "\033c"
  clear
  echo "$log"
}

ensure_var() {
  if [[ $2 == "" ]]; then
    echo "Environment variable required $1"
    exit 1
  fi
}

capitalize() {
  cap_first="$(echo ${1:0:1} | tr '[a-z]' '[A-Z]')"
  cap_rest="${1:1}"
  echo $cap_first$cap_rest
}

brew_install_or_update() {
  dont_care_if_executes brew upgrade $*
  if [[ $? != 0 ]]; then
    successfully brew install $*
  fi
}

check_sudo() {
  echo "Testing sudo, you may need to enter your password:"
  sudo echo "‚úÖ  sudo is good"
    if [[ $? != 0 ]]; then
    echo "üí•  sudo auth failed"
    exit 1
  fi
}
